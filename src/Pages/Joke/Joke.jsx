// import React, { useState, useEffect } from "react";
// import { Link } from "react-router-dom";
// import "./Joke.scss";

// const Joke = () => {
//   const [joke, setJoke] = useState({ setup: "", punchline: "" });
//   const [loading, setLoading] = useState(true);
//   const [message, setMessage] = useState("");

//   const randomJoke = () => {
//     setLoading(true);
//     fetch("https://official-joke-api.appspot.com/random_joke")
//       .then((res) => res.json())
//       .then((data) => {
//         setJoke({ setup: data.setup, punchline: data.punchline });
//       })
//       .catch((err) => console.error(err))
//       .finally(() => setLoading(false));
//   };

//   useEffect(() => {
//     randomJoke();
//   }, []);

//   const likeJoke = () => {
//     fetch("http://localhost:3001/likedJokes", {
//       method: "POST",
//       headers: { "Content-Type": "application/json" },
//       body: JSON.stringify(joke),
//     })
//       .then((res) => res.json())
//       .then(() => {
//         setMessage("u liked this joke");
//         setTimeout(() => {
//           setMessage("");
//         }, 1500);
//       });
//   };

//   const savedJoke = () => {
//     fetch("http://localhost:3001/savedJokes", {
//       method: "POST",
//       headers: { "Content-Type": "application/json" },
//       body: JSON.stringify(joke),
//     })
//       .then((res) => res.json())
//       .then(() => {
//         setMessage("u saved this joke");
//         setTimeout(() => {
//           setMessage("");
//         }, 1500);
//       });
//   };

//   return (
//     <div className="joke_app">
//       <div className={`message ${message ? "active" : ""}`}>
//         {message && <p>{message}</p>}
//       </div>
//       <div className="joke_app_container">
//         <div className="joke_app_title">
//           {loading ? (
//             <p className="loading-text">Loading a masterpiece... ‚è≥</p>
//           ) : (
//             <>
//               <h3>{joke.setup}</h3>
//               <p className="punchline">{joke.punchline}</p>
//             </>
//           )}
//         </div>
//         <div className="btn_navigation">
//           <button
//             className="big-button"
//             onClick={randomJoke}
//             disabled={loading}
//           >
//             {loading ? "Wait..." : "Next"}
//           </button>
//           <button className="big-button" onClick={likeJoke}>
//             Like
//           </button>
//           <button className="big-button" onClick={savedJoke}>
//             Save
//           </button>
//         </div>
//       </div>
//       <div className="liked_saved">
//         <button><Link to={'/liked'}>Liked</Link></button>
//         <button><Link to={'/saved'}>Saved</Link></button>
//       </div>
//     </div>
//   );
// };

// export default Joke;
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import "./Joke.scss";

const Joke = () => {
  // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
  const [joke, setJoke] = useState({ id: null, setup: "", punchline: "" });
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState("");

  const randomJoke = () => {
    setLoading(true);
    fetch("https://official-joke-api.appspot.com/random_joke")
      .then((res) => res.json())
      .then((data) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è id
        setJoke({ id: data.id, setup: data.setup, punchline: data.punchline });
      })
      .catch((err) => console.error(err))
      .finally(() => setLoading(false));
  };

  useEffect(() => {
    randomJoke();
  }, []);

  const showMessage = (msg) => {
    setMessage(msg);
    setTimeout(() => {
      setMessage("");
    }, 2000);
  };

  // –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ async/await –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
  const likeJoke = async () => {
    if (!joke.id) return; // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ —à—É—Ç–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞

    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–π–∫–Ω—É—Ç—ã–µ —à—É—Ç–∫–∏
    const response = await fetch("http://localhost:3001/likedJokes");
    const likedJokes = await response.json();

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —à—É—Ç–∫–∞ —Å —Ç–∞–∫–∏–º ID
    const isDuplicate = likedJokes.some((likedJoke) => likedJoke.id === joke.id);

    if (isDuplicate) {
      showMessage("U've already liked this joke");
      return;
    }

    // 3. –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
    await fetch("http://localhost:3001/likedJokes", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(joke),
    });
    
    showMessage("U liked this joke üëç");
  };

  // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const savedJoke = async () => {
    if (!joke.id) return;

    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à—É—Ç–∫–∏
    const response = await fetch("http://localhost:3001/savedJokes");
    const savedJokes = await response.json();

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    const isDuplicate = savedJokes.some((savedJoke) => savedJoke.id === joke.id);

    if (isDuplicate) {
      showMessage("U've already saved this joke");
      return;
    }
    
    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç
    await fetch("http://localhost:3001/savedJokes", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(joke),
    });
    
    showMessage("U saved this joke üíæ");
  };


  return (
    <div className="joke_app">
      <div className={`message ${message ? "active" : ""}`}>
        {message && <p>{message}</p>}
      </div>
      <div className="joke_app_container">
        <div className="joke_app_title">
          {loading ? (
            <p className="loading-text">Loading a masterpiece... ‚è≥</p>
          ) : (
            <>
              <h3>{joke.setup}</h3>
              <p className="punchline">{joke.punchline}</p>
            </>
          )}
        </div>
        <div className="btn_navigation">
          <button
            className="big-button"
            onClick={randomJoke}
            disabled={loading}
          >
            {loading ? "Wait..." : "Next"}
          </button>
          <button className="big-button" onClick={likeJoke} disabled={loading}>
            Like
          </button>
          <button className="big-button" onClick={savedJoke} disabled={loading}>
            Save
          </button>
        </div>
      </div>
      <div className="liked_saved">
        <button><Link to={'/liked'}>Liked</Link></button>
        <button><Link to={'/saved'}>Saved</Link></button>
      </div>
    </div>
  );
};

export default Joke;